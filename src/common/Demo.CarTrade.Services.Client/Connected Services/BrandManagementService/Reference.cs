//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Demo.CarTrade.Services.Client.BrandManagementService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BrandManagementService.IBrandManagementService")]
    public interface IBrandManagementService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrandManagementService/GetAll", ReplyAction="http://tempuri.org/IBrandManagementService/GetAllResponse")]
        Demo.CarTrade.Entity.Brand[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrandManagementService/GetAll", ReplyAction="http://tempuri.org/IBrandManagementService/GetAllResponse")]
        System.Threading.Tasks.Task<Demo.CarTrade.Entity.Brand[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrandManagementService/GetByID", ReplyAction="http://tempuri.org/IBrandManagementService/GetByIDResponse")]
        Demo.CarTrade.Entity.Brand GetByID(int brandId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrandManagementService/GetByID", ReplyAction="http://tempuri.org/IBrandManagementService/GetByIDResponse")]
        System.Threading.Tasks.Task<Demo.CarTrade.Entity.Brand> GetByIDAsync(int brandId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrandManagementService/Add", ReplyAction="http://tempuri.org/IBrandManagementService/AddResponse")]
        Demo.CarTrade.Entity.Brand Add(Demo.CarTrade.Entity.Brand obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrandManagementService/Add", ReplyAction="http://tempuri.org/IBrandManagementService/AddResponse")]
        System.Threading.Tasks.Task<Demo.CarTrade.Entity.Brand> AddAsync(Demo.CarTrade.Entity.Brand obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrandManagementService/Update", ReplyAction="http://tempuri.org/IBrandManagementService/UpdateResponse")]
        Demo.CarTrade.Entity.Brand Update(Demo.CarTrade.Entity.Brand obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrandManagementService/Update", ReplyAction="http://tempuri.org/IBrandManagementService/UpdateResponse")]
        System.Threading.Tasks.Task<Demo.CarTrade.Entity.Brand> UpdateAsync(Demo.CarTrade.Entity.Brand obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrandManagementService/Delete", ReplyAction="http://tempuri.org/IBrandManagementService/DeleteResponse")]
        void Delete(int brandId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBrandManagementService/Delete", ReplyAction="http://tempuri.org/IBrandManagementService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int brandId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBrandManagementServiceChannel : Demo.CarTrade.Services.Client.BrandManagementService.IBrandManagementService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BrandManagementServiceClient : System.ServiceModel.ClientBase<Demo.CarTrade.Services.Client.BrandManagementService.IBrandManagementService>, Demo.CarTrade.Services.Client.BrandManagementService.IBrandManagementService {
        
        public BrandManagementServiceClient() {
        }
        
        public BrandManagementServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BrandManagementServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BrandManagementServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BrandManagementServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Demo.CarTrade.Entity.Brand[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<Demo.CarTrade.Entity.Brand[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public Demo.CarTrade.Entity.Brand GetByID(int brandId) {
            return base.Channel.GetByID(brandId);
        }
        
        public System.Threading.Tasks.Task<Demo.CarTrade.Entity.Brand> GetByIDAsync(int brandId) {
            return base.Channel.GetByIDAsync(brandId);
        }
        
        public Demo.CarTrade.Entity.Brand Add(Demo.CarTrade.Entity.Brand obj) {
            return base.Channel.Add(obj);
        }
        
        public System.Threading.Tasks.Task<Demo.CarTrade.Entity.Brand> AddAsync(Demo.CarTrade.Entity.Brand obj) {
            return base.Channel.AddAsync(obj);
        }
        
        public Demo.CarTrade.Entity.Brand Update(Demo.CarTrade.Entity.Brand obj) {
            return base.Channel.Update(obj);
        }
        
        public System.Threading.Tasks.Task<Demo.CarTrade.Entity.Brand> UpdateAsync(Demo.CarTrade.Entity.Brand obj) {
            return base.Channel.UpdateAsync(obj);
        }
        
        public void Delete(int brandId) {
            base.Channel.Delete(brandId);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int brandId) {
            return base.Channel.DeleteAsync(brandId);
        }
    }
}
